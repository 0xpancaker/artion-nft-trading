/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NFTStakingInterface extends ethers.utils.Interface {
  functions: {
    "getClaimable((uint256,uint256,address))": FunctionFragment;
    "nftItem()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "stakeNFT(uint256)": FunctionFragment;
    "stakes(uint256)": FunctionFragment;
    "unStakeNFT(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getClaimable",
    values: [
      { timestamp: BigNumberish; originalPrice: BigNumberish; user: string }
    ]
  ): string;
  encodeFunctionData(functionFragment: "nftItem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unStakeNFT",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unStakeNFT", data: BytesLike): Result;

  events: {
    "CanLiquidated(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Stake(address,uint256,uint256)": EventFragment;
    "UnStake(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CanLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnStake"): EventFragment;
}

export type CanLiquidatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    owner: string;
    id: BigNumber;
    time: BigNumber;
    originalPrice: BigNumber;
    newPrice: BigNumber;
  }
>;

export type StakeEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    owner: string;
    id: BigNumber;
    time: BigNumber;
  }
>;

export type UnStakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    owner: string;
    id: BigNumber;
    time: BigNumber;
    rewardTokens: BigNumber;
  }
>;

export class NFTStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTStakingInterface;

  functions: {
    getClaimable(
      _staker: {
        timestamp: BigNumberish;
        originalPrice: BigNumberish;
        user: string;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nftItem(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    stakeNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        timestamp: BigNumber;
        originalPrice: BigNumber;
        user: string;
      }
    >;

    unStakeNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getClaimable(
    _staker: {
      timestamp: BigNumberish;
      originalPrice: BigNumberish;
      user: string;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nftItem(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  stakeNFT(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      timestamp: BigNumber;
      originalPrice: BigNumber;
      user: string;
    }
  >;

  unStakeNFT(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getClaimable(
      _staker: {
        timestamp: BigNumberish;
        originalPrice: BigNumberish;
        user: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftItem(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    stakeNFT(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        timestamp: BigNumber;
        originalPrice: BigNumber;
        user: string;
      }
    >;

    unStakeNFT(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CanLiquidated(address,uint256,uint256,uint256,uint256)"(
      owner?: string | null,
      id?: null,
      time?: null,
      originalPrice?: null,
      newPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        id: BigNumber;
        time: BigNumber;
        originalPrice: BigNumber;
        newPrice: BigNumber;
      }
    >;

    CanLiquidated(
      owner?: string | null,
      id?: null,
      time?: null,
      originalPrice?: null,
      newPrice?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        id: BigNumber;
        time: BigNumber;
        originalPrice: BigNumber;
        newPrice: BigNumber;
      }
    >;

    "Stake(address,uint256,uint256)"(
      owner?: string | null,
      id?: null,
      time?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; id: BigNumber; time: BigNumber }
    >;

    Stake(
      owner?: string | null,
      id?: null,
      time?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; id: BigNumber; time: BigNumber }
    >;

    "UnStake(address,uint256,uint256,uint256)"(
      owner?: string | null,
      id?: null,
      time?: null,
      rewardTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { owner: string; id: BigNumber; time: BigNumber; rewardTokens: BigNumber }
    >;

    UnStake(
      owner?: string | null,
      id?: null,
      time?: null,
      rewardTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { owner: string; id: BigNumber; time: BigNumber; rewardTokens: BigNumber }
    >;
  };

  estimateGas: {
    getClaimable(
      _staker: {
        timestamp: BigNumberish;
        originalPrice: BigNumberish;
        user: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftItem(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakeNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    unStakeNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getClaimable(
      _staker: {
        timestamp: BigNumberish;
        originalPrice: BigNumberish;
        user: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftItem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unStakeNFT(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
