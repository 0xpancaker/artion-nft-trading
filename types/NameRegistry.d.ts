/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NameRegistryInterface extends ethers.utils.Interface {
  functions: {
    "claimUnLockedBalance(bytes32)": FunctionFragment;
    "durationFactor()": FunctionFragment;
    "getOwner(string)": FunctionFragment;
    "lengthFactor()": FunctionFragment;
    "names(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "register(string)": FunctionFragment;
    "renew(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserve(bytes32)": FunctionFragment;
    "reserveExpireDuration()": FunctionFragment;
    "setDurationFactor(uint256)": FunctionFragment;
    "setLengthFactor(uint256)": FunctionFragment;
    "setReserveExpireDuration(uint256)": FunctionFragment;
    "totalFees()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFee(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimUnLockedBalance",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "durationFactor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lengthFactor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "names", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "register", values: [string]): string;
  encodeFunctionData(functionFragment: "renew", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "reserveExpireDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDurationFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLengthFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveExpireDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdrawFee", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "claimUnLockedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "durationFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lengthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "names", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveExpireDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDurationFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLengthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveExpireDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class NameRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NameRegistryInterface;

  functions: {
    claimUnLockedBalance(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    durationFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwner(strName: string, overrides?: CallOverrides): Promise<[string]>;

    lengthFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    names(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        lockedBalance: BigNumber;
        reserveExpire: BigNumber;
        registerExpire: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    register(
      strName: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renew(
      strName: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserve(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveExpireDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDurationFactor(
      _durationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLengthFactor(
      _lengthFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReserveExpireDuration(
      _reserveExpireDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimUnLockedBalance(
    hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  durationFactor(overrides?: CallOverrides): Promise<BigNumber>;

  getOwner(strName: string, overrides?: CallOverrides): Promise<string>;

  lengthFactor(overrides?: CallOverrides): Promise<BigNumber>;

  names(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      owner: string;
      lockedBalance: BigNumber;
      reserveExpire: BigNumber;
      registerExpire: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  register(
    strName: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renew(
    strName: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserve(
    _hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveExpireDuration(overrides?: CallOverrides): Promise<BigNumber>;

  setDurationFactor(
    _durationFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLengthFactor(
    _lengthFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReserveExpireDuration(
    _reserveExpireDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalFees(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimUnLockedBalance(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    durationFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(strName: string, overrides?: CallOverrides): Promise<string>;

    lengthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    names(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        owner: string;
        lockedBalance: BigNumber;
        reserveExpire: BigNumber;
        registerExpire: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    register(strName: string, overrides?: CallOverrides): Promise<void>;

    renew(strName: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserve(_hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    reserveExpireDuration(overrides?: CallOverrides): Promise<BigNumber>;

    setDurationFactor(
      _durationFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLengthFactor(
      _lengthFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReserveExpireDuration(
      _reserveExpireDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(_to: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    claimUnLockedBalance(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    durationFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(strName: string, overrides?: CallOverrides): Promise<BigNumber>;

    lengthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    names(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      strName: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renew(
      strName: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserve(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveExpireDuration(overrides?: CallOverrides): Promise<BigNumber>;

    setDurationFactor(
      _durationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLengthFactor(
      _lengthFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReserveExpireDuration(
      _reserveExpireDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFee(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimUnLockedBalance(
      hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    durationFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(
      strName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lengthFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    names(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      strName: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renew(
      strName: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserve(
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveExpireDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDurationFactor(
      _durationFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLengthFactor(
      _lengthFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReserveExpireDuration(
      _reserveExpireDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
