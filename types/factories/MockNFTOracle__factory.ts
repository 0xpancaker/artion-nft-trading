/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockNFTOracle, MockNFTOracleInterface } from "../MockNFTOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "_nftItem",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftItem",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_newPrice",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610876380380610876833981810160405281019061003291906101e5565b61004e6100436100a460201b60201c565b6100ac60201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a764000060028190555050610212565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101a082610175565b9050919050565b60006101b282610195565b9050919050565b6101c2816101a7565b81146101cd57600080fd5b50565b6000815190506101df816101b9565b92915050565b6000602082840312156101fb576101fa610170565b5b6000610209848285016101d0565b91505092915050565b610655806102216000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806350d25bcd14610067578063715018a6146100855780638da5cb5b1461008f57806391b7f5ed146100ad578063a1e05011146100c9578063f2fde38b146100e7575b600080fd5b61006f610103565b60405161007c9190610368565b60405180910390f35b61008d61010d565b005b610097610121565b6040516100a491906103c4565b60405180910390f35b6100c760048036038101906100c29190610410565b61014a565b005b6100d161015c565b6040516100de919061049c565b60405180910390f35b61010160048036038101906100fc91906104e3565b610182565b005b6000600254905090565b610115610205565b61011f6000610283565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610152610205565b8060028190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61018a610205565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f090610593565b60405180910390fd5b61020281610283565b50565b61020d610347565b73ffffffffffffffffffffffffffffffffffffffff1661022b610121565b73ffffffffffffffffffffffffffffffffffffffff1614610281576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610278906105ff565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b6103628161034f565b82525050565b600060208201905061037d6000830184610359565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103ae82610383565b9050919050565b6103be816103a3565b82525050565b60006020820190506103d960008301846103b5565b92915050565b600080fd5b6103ed8161034f565b81146103f857600080fd5b50565b60008135905061040a816103e4565b92915050565b600060208284031215610426576104256103df565b5b6000610434848285016103fb565b91505092915050565b6000819050919050565b600061046261045d61045884610383565b61043d565b610383565b9050919050565b600061047482610447565b9050919050565b600061048682610469565b9050919050565b6104968161047b565b82525050565b60006020820190506104b1600083018461048d565b92915050565b6104c0816103a3565b81146104cb57600080fd5b50565b6000813590506104dd816104b7565b92915050565b6000602082840312156104f9576104f86103df565b5b6000610507848285016104ce565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061057d602683610510565b915061058882610521565b604082019050919050565b600060208201905081810360008301526105ac81610570565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006105e9602083610510565b91506105f4826105b3565b602082019050919050565b60006020820190508181036000830152610618816105dc565b905091905056fea2646970667358221220be8c99226993a99054957ecfdad49fe497b002d9f48f6908c4e37cc6425d8edc64736f6c63430008110033";

export class MockNFTOracle__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _nftItem: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockNFTOracle> {
    return super.deploy(_nftItem, overrides || {}) as Promise<MockNFTOracle>;
  }
  getDeployTransaction(
    _nftItem: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_nftItem, overrides || {});
  }
  attach(address: string): MockNFTOracle {
    return super.attach(address) as MockNFTOracle;
  }
  connect(signer: Signer): MockNFTOracle__factory {
    return super.connect(signer) as MockNFTOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockNFTOracleInterface {
    return new utils.Interface(_abi) as MockNFTOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockNFTOracle {
    return new Contract(address, _abi, signerOrProvider) as MockNFTOracle;
  }
}
